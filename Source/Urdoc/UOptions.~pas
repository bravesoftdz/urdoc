unit UOptions;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, Buttons, ExtCtrls, FileCtrl, ComCtrls, IBServices, db;

type
  TfmOptions = class(TForm)
    pnBottom: TPanel;
    Panel3: TPanel;
    bibOk: TBitBtn;
    bibCancel: TBitBtn;
    TV: TTreeView;
    pnMain: TPanel;
    ntb: TNotebook;
    grbBaseDir: TGroupBox;
    edBaseDir: TEdit;
    bibBaseDir: TBitBtn;
    pnTopStatus: TPanel;
    lbTopStatus: TLabel;
    chbFirstArch: TCheckBox;
    chbLastArch: TCheckBox;
    chbTimeArch: TCheckBox;
    edTimeArch: TEdit;
    udTimeArch: TUpDown;
    Label1: TLabel;
    lbFreezeArch: TLabel;
    edFreezeArch: TEdit;
    udFreezeArch: TUpDown;
    Label2: TLabel;
    chbDelTempFile: TCheckBox;
    grbFileHelp: TGroupBox;
    edFileHelp: TEdit;
    bibFileHelp: TBitBtn;
    od: TOpenDialog;
    lbRestoreSleep: TLabel;
    edRestoreSleep: TEdit;
    udRestoreSleep: TUpDown;
    lbRestoreSleepSec: TLabel;
    chbTextPClose: TCheckBox;
    lbTranslateToUpperCase: TLabel;
    hkTranslateToUpperCase: THotKey;
    lbTranslateToLowerCase: TLabel;
    hkTranslateToLowerCase: THotKey;
    lbTranslateToRussian: TLabel;
    hkTranslateToRussian: THotKey;
    lbTranslateToEnglish: TLabel;
    hkTranslateToEnglish: THotKey;
    lbDefaultDir: TLabel;
    edDefaultDir: TEdit;
    chbViewDateInListView: TCheckBox;
    chbViewPath: TCheckBox;
    chbRefreshForm: TCheckBox;
    chbChangeDocument: TCheckBox;
    chbDeleteQuiteInReestr: TCheckBox;
    chbViewDeleteQuiteInReestr: TCheckBox;
    lbDayDoverOffset: TLabel;
    edDayDoverOffset: TEdit;
    udDayDoverOffset: TUpDown;
    chbDisableDefaultOnForm: TCheckBox;
    grbUpdateInfo: TGroupBox;
    edUpdateInfoFile: TEdit;
    bibUpdateInfo: TBitBtn;
    chbViewUpdateInfo: TCheckBox;
    chbViewHintOnFocus: TCheckBox;
    chbViewReminder: TCheckBox;
    chbAutoUpdateWords: TCheckBox;
    chbViewWhoCert: TCheckBox;
    chbDocumentLock: TCheckBox;
    chbNotViewHereditaryDeal: TCheckBox;
    chbExpandConst: TCheckBox;
    chbQuestionBackup: TCheckBox;
    chbSelectDatabase: TCheckBox;
    procedure bibOkClick(Sender: TObject);
    procedure edBaseDirChange(Sender: TObject);
    procedure bibBaseDirClick(Sender: TObject);
    procedure chbTimeArchClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure chbDelTempFileClick(Sender: TObject);
    procedure TVAdvancedCustomDrawItem(Sender: TCustomTreeView;
      Node: TTreeNode; State: TCustomDrawState; Stage: TCustomDrawStage;
      var PaintImages, DefaultDraw: Boolean);
    procedure TVChange(Sender: TObject; Node: TTreeNode);
    procedure bibFileHelpClick(Sender: TObject);
    procedure chbViewDeleteQuiteInReestrClick(Sender: TObject);
    procedure bibUpdateInfoClick(Sender: TObject);
    procedure chbChangeDocumentClick(Sender: TObject);
    procedure chbExpandConstClick(Sender: TObject);
  private
    FLicenseID: Integer;
    procedure SetLicenseID(Value: Integer);
    procedure SelectPage(Index: Integer); 
  public
    isSetAll: Boolean;
    ChangeFlag: Boolean;
    property LicenseID: Integer read FLicenseID write SetLicenseID;
  end;

var
  fmOptions: TfmOptions;

implementation

uses UDm, UUtils, UMain, UServerConnect, URBLicense, tsvGradientLabel;

{$R *.DFM}

procedure TfmOptions.bibOkClick(Sender: TObject);
begin
  if not ConnectServer(Trim(edBaseDir.Text)) then begin
   ShowError(Handle,'База данных не найдена.');
   SelectPage(0);
   bibBaseDir.SetFocus;
   exit;
  end;
  if Trim(edFileHelp.Text)<>'' then
   if not FileExists(edFileHelp.Text) then begin
    ShowError(Handle,'Файл помощи не найден.');
    SelectPage(3);
    edFileHelp.SetFocus;
    exit;
   end;

  modalResult:=mrOk;
end;

procedure TfmOptions.edBaseDirChange(Sender: TObject);
begin
  ChangeFlag:=true;
end;

procedure TfmOptions.bibBaseDirClick(Sender: TObject);
var
  fm: TfmServerConnect;
  Prot: TProtocol;
  SrvName: string;
begin
  fm:=TfmServerConnect.Create(nil);
  try
   GetProtocolAndServerName(DataBaseName,Prot,SrvName);
   fm.SetParams(DataBaseName,Prot,SrvName);
   if fm.ShowModal=mrOk then begin
    if ConnectServer(fm.ConnectString) then
     edBaseDir.Text:=fm.ConnectString;
     ChangeFlag:=true;
   end;  
  finally
   fm.Free;
  end;
//  edBaseDir.text:=GetDir(handle,Trim(edBaseDir.text));
end;

procedure TfmOptions.chbTimeArchClick(Sender: TObject);
begin
  if chbTimeArch.Checked then begin
    edTimeArch.Enabled:=true;
    edTimeArch.Color:=clWindow;
    udTimeArch.Enabled:=true;
  end else begin
    edTimeArch.Enabled:=false;
    edTimeArch.Color:=clBtnFace;
    udTimeArch.Enabled:=false;
  end;
end;

procedure TfmOptions.FormCreate(Sender: TObject);
var
  lb: TtsvGradientLabel;
begin
  isSetAll:=false;
  OnKeyDown:=fmMain.OnKeyDown;
  OnKeyPress:=fmMain.OnKeyPress;
  OnKeyUp:=fmMain.OnKeyUp;
  ntb.PageIndex:=0;
  lb:=TtsvGradientLabel.Create(Self);
  lb.Parent:=lbTopStatus.Parent;
  lb.Align:=lbTopStatus.Align;
  lb.Font.Assign(lbTopStatus.Font);
  lb.FromColor:=clBtnShadow;
  lb.ToColor:=clBtnFace;
  lb.ColorCount:=ColorCount;
  lbTopStatus.Free;
  lb.Name:='lbTopStatus';
  lbTopStatus:=TLabel(lb);
end;

procedure TfmOptions.chbDelTempFileClick(Sender: TObject);
begin
  ChangeFlag:=true;
end;

procedure TfmOptions.TVAdvancedCustomDrawItem(Sender: TCustomTreeView;
  Node: TTreeNode; State: TCustomDrawState; Stage: TCustomDrawStage;
  var PaintImages, DefaultDraw: Boolean);
{var
  rt: Trect;}
begin
{  if GetFocus<>tv.Handle then begin
    if Node=Tv.Selected then begin
      tv.Canvas.Brush.Style:=bsSolid;
      tv.Canvas.Brush.Color:=clBtnFace;
      rt:=Node.DisplayRect(true);
      tv.Canvas.FillRect(rt);
      tv.Canvas.Brush.Style:=bsClear;
      tv.Canvas.TextOut(rt.Left+2,rt.top+1,node.text);
 //     tv.Canvas.DrawFocusRect(rt);
//      DefaultDraw:=false;
    end else begin
     DefaultDraw:=true;
    end;
  end else DefaultDraw:=true;  }
end;

procedure TfmOptions.TVChange(Sender: TObject; Node: TTreeNode);
var
  nd: TTreeNode;
begin
  nd:=Tv.Selected;
  if nd=nil then exit;
  lbTopStatus.Caption:=nd.Text;
  ntb.PageIndex:=nd.AbsoluteIndex;
end;

procedure TfmOptions.bibFileHelpClick(Sender: TObject);
begin
  od.FileName:=edFileHelp.Text;
  od.Filter:=FilterAll;
  if not od.Execute then exit;
  edFileHelp.Text:=od.FileName;
end;

procedure TfmOptions.SetLicenseID(Value: Integer);
begin
end;

procedure TfmOptions.SelectPage(Index: Integer);
var
  nd: TTreeNode;
begin
  ntb.PageIndex:=Index;
  nd:=TV.Items.Item[Index];
  nd.Selected:=true;
  lbTopStatus.Caption:=nd.Text;
end;

procedure TfmOptions.chbViewDeleteQuiteInReestrClick(Sender: TObject);
begin
  if isSetAll then begin
    ChangeFlag:=true;
    if chbViewDeleteQuiteInReestr.Checked then begin
      chbDeleteQuiteInReestr.Checked:=true;
    end else begin
      chbDeleteQuiteInReestr.Checked:=false;
    end;
  end;  
end;

procedure TfmOptions.bibUpdateInfoClick(Sender: TObject);
begin
  od.FileName:=edUpdateInfoFile.Text;
  od.Filter:=FilterAll;
  if not od.Execute then exit;
  edUpdateInfoFile.Text:=od.FileName;
end;

procedure TfmOptions.chbChangeDocumentClick(Sender: TObject);
begin
  chbExpandConst.Checked:=not chbChangeDocument.Checked;
end;

procedure TfmOptions.chbExpandConstClick(Sender: TObject);
begin
  chbChangeDocument.Checked:=not chbExpandConst.Checked;
end;

end.
